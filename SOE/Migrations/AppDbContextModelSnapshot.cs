// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SOE.Services;

#nullable disable

namespace SOE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.18");

            modelBuilder.Entity("SOE.Entities.Election", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("SOE.Entities.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("SOE.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Used")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VoterId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SOE.Entities.Voter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("SOE.Entities.VoterElection", b =>
                {
                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("VoterPublicKey")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("VoterSignature")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("VoterId", "ElectionId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("OptionId");

                    b.ToTable("VoterElections");
                });

            modelBuilder.Entity("SOE.Entities.Option", b =>
                {
                    b.HasOne("SOE.Entities.Election", "Election")
                        .WithMany("Options")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("SOE.Entities.Token", b =>
                {
                    b.HasOne("SOE.Entities.Voter", "Voter")
                        .WithMany("Tokens")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("SOE.Entities.VoterElection", b =>
                {
                    b.HasOne("SOE.Entities.Election", "Election")
                        .WithMany("Voters")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOE.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOE.Entities.Voter", "Voter")
                        .WithMany("Elections")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Option");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("SOE.Entities.Election", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Voters");
                });

            modelBuilder.Entity("SOE.Entities.Voter", b =>
                {
                    b.Navigation("Elections");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
